plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android {
    namespace 'ch.lock.mobile.android.deviceinfo'
    compileSdk 32

    defaultConfig {
        applicationId "ch.lock.mobile.android.deviceinfo"
        minSdk 28
        targetSdk 32
        versionCode 2
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        keystore {
            def keystoreProperties = loadKeystore("./app/keystore/keystore.properties")

            storeFile file(keystoreProperties.storeFile)
            storePassword keystoreProperties.storePassword
            keyAlias keystoreProperties.keyAlias
            keyPassword keystoreProperties.keyPassword
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            aaptOptions.cruncherEnabled = false

            signingConfig signingConfigs.keystore

            versionNameSuffix "-dbg"
            applicationIdSuffix ".dbg"

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            createApk()
        }
        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            aaptOptions.cruncherEnabled = true

            signingConfig signingConfigs.keystore

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            createApk()
        }
    }
    buildFeatures {
        dataBinding = true
    }
    kapt {
        generateStubs = true
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def loadKeystore(filePath) {
    def properties = new Properties()

    properties.load(new FileInputStream(rootProject.file(filePath)))
    return properties
}

def createApk() {
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFileName.endsWith('.apk')) {
                def appName = "DeviceInfo"
                def date = new Date().format('yyyyMMdd')
                def dir = "./apk/" + variant.versionName + "(" + variant.versionCode + ")"
                def apk = appName + "-" + variant.versionName + "-" + date + ".apk"

                outputFileName = new File(dir, apk)
            }
        }
    }
}

dependencies {

    // Android Support
    implementation "androidx.core:core-ktx:$rootProject.androidx_version"
    implementation "androidx.appcompat:appcompat:$rootProject.appcompat_version"
    implementation "com.google.android.material:material:$rootProject.androidx_version"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintlayout_version"

    // (Java only)
    implementation "androidx.work:work-runtime:$rootProject.work_version"

    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$rootProject.work_version"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx3:$rootProject.coroutines_version"

    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$rootProject.work_version"

    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:$rootProject.work_version"

    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:$rootProject.work_version"

    // RxAndroid
    implementation "io.reactivex.rxjava3:rxkotlin:$rootProject.rxKotlin_version"
    implementation "io.reactivex.rxjava3:rxandroid:$rootProject.rxAndroid_version"
    implementation "com.github.akarnokd:rxjava3-bridge:$rootProject.rx3Bridge_version"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$rootProject.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$rootProject.lifecycle_version"

    // Koin
    implementation "io.insert-koin:koin-core:$rootProject.koin_version"
    implementation "io.insert-koin:koin-android:$rootProject.koin_version"
    testImplementation "io.insert-koin:koin-test:$rootProject.koin_version"

    // ActivityResult
    implementation "io.github.ParkSangGwon:tedonactivityresult-rx2:$rootProject.tedActivityResult_version"

    // Permission
    implementation "io.github.ParkSangGwon:tedpermission-coroutine:$rootProject.tedpermission_version"

    // Test
    testImplementation "junit:junit:$rootProject.junit_version"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.junit_android_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espresso_core_version"
}